<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Physics and other random stuff]]></title>
  <link href="http://dereine.github.com/physics-blog/atom.xml" rel="self"/>
  <link href="http://dereine.github.com/physics-blog/"/>
  <updated>2011-11-24T23:06:47+01:00</updated>
  <id>http://dereine.github.com/physics-blog/</id>
  <author>
    <name><![CDATA[Daniel Wehner]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Review of fullcalendar module]]></title>
    <link href="http://dereine.github.com/physics-blog/blog/2011/11/24/review-of-fullcalendar-module/"/>
    <updated>2011-11-24T22:41:00+01:00</updated>
    <id>http://dereine.github.com/physics-blog/blog/2011/11/24/review-of-fullcalendar-module</id>
    <content type="html"><![CDATA[<p>As the fullcalendar module is written in a really good way it
requires ctools, date and views to be able to be used. After
installing this three modules you have to install the fullcalendar
javascript files as well. Luckily fullcalendar provides a drush command,
so all you need to do is:</p>

<figure class='code'><figcaption><span>Download the fullcalendar js code  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>  drush fullcalendar-plugin
</span></code></pre></td></tr></table></div></figure>


<p>After you have setup a content type/entity with a date field
you can create a view which uses fullcalendar as style.</p>

<p>As a result you get a nice looking date interface.
<img src="http://wstaw.org/m/2011/11/24/dates.png" /></p>

<p>Thanks tim.plunkett, aspilicious and geerlingguy
for contributing this module.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Compile root under ubuntu 11.10]]></title>
    <link href="http://dereine.github.com/physics-blog/blog/2011/11/17/use-root-dot-cern-to-find-a-minimum-of-a-function/"/>
    <updated>2011-11-17T15:44:00+01:00</updated>
    <id>http://dereine.github.com/physics-blog/blog/2011/11/17/use-root-dot-cern-to-find-a-minimum-of-a-function</id>
    <content type="html"><![CDATA[<p>There are several ways to find a minimum/optimum of a certain function, for example
for linear equations you can setup a matrix and solve it.</p>

<p>But there are also a lot of different kind of software packets. The one i want to show here
is the ROOT package from cern [1]. This package can handle a lot, so i will cover only a
really small part.</p>

<p><em>USE THE CURRENT TRUNK</em></p>

<h2>Installation under ubuntu</h2>

<p>First setup some bash variables:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">export </span><span class="nv">ROOTSYS</span><span class="o">=</span>path_to/root
</span><span class='line'><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="nv">$ROOTSYS</span>/bin:<span class="nv">$PATH</span>
</span><span class='line'><span class="nb">export </span><span class="nv">LD_LIBRARY_PATH</span><span class="o">=</span><span class="nv">$ROOTSYS</span>/lib:<span class="nv">$LD_LIBRARY_PATH</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then change to your root folder and run:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd </span>root
</span><span class='line'>./configure linux
</span><span class='line'>make
</span></code></pre></td></tr></table></div></figure>


<p>Now you have root compiled and start to work with it.</p>

<p>[1] http://root.cern.ch/drupal/content/about</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Custom latex commands]]></title>
    <link href="http://dereine.github.com/physics-blog/blog/2011/11/11/custom-latex-commands/"/>
    <updated>2011-11-11T13:54:00+01:00</updated>
    <id>http://dereine.github.com/physics-blog/blog/2011/11/11/custom-latex-commands</id>
    <content type="html"><![CDATA[<p>In latex it&#8217;s often helpful to define custom commands for certain things.
One thing for example to write a derivation.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='latex'><span class='line'>  <span class="k">\newcommand</span><span class="nb">{</span><span class="k">\diff</span><span class="nb">}</span>[2]<span class="nb">{</span><span class="k">\frac</span><span class="nb">{</span><span class="k">\text</span><span class="nb">{</span>d<span class="nb">}</span> #1<span class="nb">}{</span><span class="k">\text</span><span class="nb">{</span>d<span class="nb">}</span> #2<span class="nb">}}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Therefore the command &#8220;newcommand&#8221; expects first the amount of parameters and then the output
which should be generated by your function. The argument placeholders starts with #1.
But you could do even more fancy things. For example you could write a command which calls another command:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='latex'><span class='line'><span class="k">\newcommand</span><span class="nb">{</span><span class="k">\test</span><span class="nb">}</span>[1]<span class="nb">{</span>
</span><span class='line'>  hallo<span class="k">\testt</span><span class="nb">{</span>#1<span class="nb">}</span>
</span><span class='line'><span class="nb">}</span>
</span><span class='line'><span class="k">\newcommand</span><span class="nb">{</span><span class="k">\testt</span><span class="nb">}</span>[1]<span class="nb">{</span>
</span><span class='line'> norbert #1
</span><span class='line'><span class="nb">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So with latex you can have any kind of commands, to be productive while writing your document.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[You know php is broken as well]]></title>
    <link href="http://dereine.github.com/physics-blog/blog/2011/10/30/php-wtf/"/>
    <updated>2011-10-30T07:13:00+01:00</updated>
    <id>http://dereine.github.com/physics-blog/blog/2011/10/30/php-wtf</id>
    <content type="html"><![CDATA[<p>As php is not strict like c++ you have a lot of crazy stuff.
Here is a random example</p>

<figure class='code'><figcaption><span>Case block assigning varibles   </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">class foo {</span>
</span><span class='line'><span class="x">  function foo($val) {</span>
</span><span class='line'><span class="x">    $this-&gt;foo = $val;</span>
</span><span class='line'><span class="x">  }</span>
</span><span class='line'><span class="x">}</span>
</span><span class='line'>
</span><span class='line'><span class="x">$foo1 =&amp; $foo2;</span>
</span><span class='line'><span class="x">print_r($foo1);</span>
</span><span class='line'><span class="x">$foo1-&gt;foo = &quot;foo1&quot;;</span>
</span><span class='line'>
</span><span class='line'><span class="x">print_r($foo1-&gt;foo);</span>
</span><span class='line'><span class="x">$foo2 = new foo(&quot;foo3&quot;);</span>
</span><span class='line'><span class="x">print_r($foo1-&gt;foo);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The interesting thing is that you reference a not existing variable , initialize this variable and alter
the first variable. By default php throws quite some notices if you have non-strict code,
but here php doesn&#8217;t complain.</p>

<p>Some interesting links to read: http://www.phpwtf.org/more-array-references http://www.phpwtf.org/array-reference-always-succeeds</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Define variables in a case statement in C++]]></title>
    <link href="http://dereine.github.com/physics-blog/blog/2011/10/27/cpp-case-variables/"/>
    <updated>2011-10-27T07:13:00+02:00</updated>
    <id>http://dereine.github.com/physics-blog/blog/2011/10/27/cpp-case-variables</id>
    <content type="html"><![CDATA[<p>Just to be sure always use brackets in case:</p>

<figure class='code'><figcaption><span>Case block assigning varibles ++  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">switch</span> <span class="p">(</span><span class="n">foo</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="mi">1</span>:
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="n">string</span> <span class="n">foo</span><span class="p">(</span><span class="s">&quot;123&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">break</span><span class="p">;</span>
</span><span class='line'>  <span class="k">case</span> <span class="mi">2</span>:
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="n">string</span> <span class="n">bar</span><span class="p">(</span><span class="s">&quot;246&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Write cases in latex]]></title>
    <link href="http://dereine.github.com/physics-blog/blog/2011/10/22/latex-cases/"/>
    <updated>2011-10-22T07:13:00+02:00</updated>
    <id>http://dereine.github.com/physics-blog/blog/2011/10/22/latex-cases</id>
    <content type="html"><![CDATA[<p>
  Often you want to have something like
  <img src="http://itp.tugraz.at/wiki/images/math/f/3/5/f355f3bdfe7fb3fc66b4c44e1cf0e734.png" />
  when you write your own latex.
</p>


<p>This is quite easy</p>

<figure class='code'><figcaption><span>Cases   </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='latex'><span class='line'>  f(n)=<span class="k">\begin</span><span class="nb">{</span>cases<span class="nb">}</span>
</span><span class='line'>    n/2,  <span class="nb">&amp;</span> <span class="k">\text</span><span class="nb">{</span>if <span class="nb">}</span>n<span class="k">\text</span><span class="nb">{</span> even,<span class="nb">}</span><span class="k">\\</span>
</span><span class='line'>    3n+1, <span class="nb">&amp;</span> <span class="k">\text</span><span class="nb">{</span>if <span class="nb">}</span>n<span class="k">\text</span><span class="nb">{</span> odd.<span class="nb">}</span>
</span><span class='line'>  <span class="k">\end</span><span class="nb">{</span>cases<span class="nb">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Woher kommt der Begriff Amerikaner]]></title>
    <link href="http://dereine.github.com/physics-blog/blog/2011/10/22/gebaeck/"/>
    <updated>2011-10-22T07:13:00+02:00</updated>
    <id>http://dereine.github.com/physics-blog/blog/2011/10/22/gebaeck</id>
    <content type="html"><![CDATA[<p>Wenn man beim Bäcker steht, sieht man oft ein Gebäckstück names &#8220;Amerikaner&#8221;, siehe http://tinyurl.com/6gfq5jo.
Da stellt sich natürlich die Frage woher kommt der Name.</p>

<p>Eine Vermutung ist, dass es ursprünglich aus den USA kommt, aber es
gibt eine noch viel einfachere Erklärung: sie haben viel Amoniak.
Da sich &#8220;Amoniak&#8221;-ianer nicht wirklich aussprechen lässt wurden sie als &#8220;Amerikaner&#8221; abgekürzt.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Get all keys + values of a map]]></title>
    <link href="http://dereine.github.com/physics-blog/blog/2011/10/19/python-key-values-map/"/>
    <updated>2011-10-19T07:13:00+02:00</updated>
    <id>http://dereine.github.com/physics-blog/blog/2011/10/19/python-key-values-map</id>
    <content type="html"><![CDATA[<p>It&#8217;s quite common that you need each key and value in a for loop for a map {0: &#8220;value&#8221;}.
Here is a little code snippet to do it:</p>

<figure class='code'><figcaption><span>Iterate over a map   </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">items</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">:</span> <span class="s">&quot;value&quot;</span><span class="p">,</span> <span class="mi">1</span><span class="p">:</span> <span class="s">&quot;value2&quot;</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">key</span><span class="p">,</span> <span class="n">value</span> <span class="ow">in</span> <span class="n">items</span><span class="o">.</span><span class="n">iteritems</span><span class="p">():</span>
</span><span class='line'>  <span class="k">print</span> <span class="n">key</span>
</span><span class='line'>  <span class="k">print</span> <span class="n">value</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&#8217;s it.</p>

<p>Learn python and fly like a butterfly.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Join a list of floats with python.]]></title>
    <link href="http://dereine.github.com/physics-blog/blog/2011/10/19/python-join-list/"/>
    <updated>2011-10-19T07:13:00+02:00</updated>
    <id>http://dereine.github.com/physics-blog/blog/2011/10/19/python-join-list</id>
    <content type="html"><![CDATA[<p>Let&#8217;s assume you have a list of numbers [1, 2.0, 3] and you want to output them
comma seperated. That&#8217;s quite easy in python:</p>

<figure class='code'><figcaption><span>Join list to a string   </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nb">list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mf">2.0</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span><span class='line'><span class="s">&quot; &quot;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">str</span><span class="p">,</span> <span class="nb">list</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Parse configuration with boost.]]></title>
    <link href="http://dereine.github.com/physics-blog/blog/2011/10/16/latex-parse-files/"/>
    <updated>2011-10-16T07:13:00+02:00</updated>
    <id>http://dereine.github.com/physics-blog/blog/2011/10/16/latex-parse-files</id>
    <content type="html"><![CDATA[<p>If you have some kind of simulation you always have input
which you have to parse to get the initial data.</p>

<ul>
<li>One solution is to use raw c++ code, but it&#8217;s quite hard to read, complex and hard to change.</li>
<li>One solution is to use boost/tokenizer together with boost/lexical_cast and boost/algorithm/string.</li>
</ul>


<figure class='code'><figcaption><span>Parse a file with boost ++  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">// Include the needed libraries.</span>
</span><span class='line'><span class="cp">#include &lt;boost/tokenizer.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;boost/algorithm/string.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;boost/lexical_cast.hpp&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// The actual code</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Open the file</span>
</span><span class='line'><span class="n">string</span> <span class="n">filename</span> <span class="o">=</span> <span class="s">&quot;filename-we-want-to-open&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">ifstream</span> <span class="n">file</span><span class="p">(</span><span class="n">filename</span><span class="p">.</span><span class="n">c_str</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Shortcut to tokenizer type.</span>
</span><span class='line'><span class="k">typedef</span> <span class="n">boost</span><span class="o">::</span><span class="n">tokenizer</span><span class="o">&lt;</span><span class="n">boost</span><span class="o">::</span><span class="n">char_separator</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">tokenizer</span><span class="p">;</span>
</span><span class='line'><span class="c1">// Define a seperator, which seperates by &quot; &quot;.</span>
</span><span class='line'><span class="c1">// By default it skips empty content, so you can import &quot;2.0       3 4&quot; with this.</span>
</span><span class='line'><span class="n">char_separator</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span> <span class="n">sep</span><span class="p">(</span><span class="s">&quot; &quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Load the content of the file line by line.</span>
</span><span class='line'><span class="k">while</span> <span class="p">(</span><span class="n">getline</span><span class="p">(</span><span class="n">file</span><span class="p">,</span> <span class="n">line</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// First trim the line content of whitespaces.</span>
</span><span class='line'>  <span class="c1">// Therefore boost/algorith/string.hpp is used.</span>
</span><span class='line'>  <span class="n">trim</span><span class="p">(</span><span class="n">line</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">// Seperate the actual line.</span>
</span><span class='line'>  <span class="n">tokenizer</span> <span class="n">tokens</span><span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="n">sep</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Iterate over the availible tokens, so in our case &quot;2&quot;, &quot;3&quot;, &quot;4&quot;.</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">tokenizer</span><span class="o">::</span><span class="n">iterator</span> <span class="n">beg</span> <span class="o">=</span> <span class="n">tokens</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span> <span class="n">beg</span> <span class="o">!=</span> <span class="n">tokens</span><span class="p">.</span><span class="n">end</span><span class="p">();</span> <span class="o">++</span><span class="n">beg</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Use boost::lexical_cast to convert the strings to doubles.</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">value</span> <span class="o">=</span> <span class="n">lexical_cast</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span><span class="p">(</span><span class="o">*</span><span class="n">beg</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// ... Do something with the value.</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Sure there might be a bunch of more advanced/easier way to do it, but this worked for me.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reference parts of your content in a latex document.]]></title>
    <link href="http://dereine.github.com/physics-blog/blog/2011/10/15/latex-references/"/>
    <updated>2011-10-15T07:13:00+02:00</updated>
    <id>http://dereine.github.com/physics-blog/blog/2011/10/15/latex-references</id>
    <content type="html"><![CDATA[<p>Often you want to reference certain prts of your latex document.
For example you have a diagramm in a float which float around somewhere in the document, but you want to refer to it in your text.
Another often used example are equations.</p>

<p>There are two steps you have to define:</p>

<ul>
<li>Define a label. For example \label{fig:picture-name-1}</li>
<li>Reference to it using \ref{fig:picture-name-1}</li>
</ul>


<p>That&#8217;s it. Take care that most latex editors, for example kile
compiles your document twice to get references/table of content right.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nice rendering for gnuplot images]]></title>
    <link href="http://dereine.github.com/physics-blog/blog/2011/10/15/gnuplot-nice-png/"/>
    <updated>2011-10-15T07:13:00+02:00</updated>
    <id>http://dereine.github.com/physics-blog/blog/2011/10/15/gnuplot-nice-png</id>
    <content type="html"><![CDATA[<p>If you use the default output of gnuplot eps or png the rendering
is somehow quite bad. No antialiasing and small fonts, but there are better
alternatives.</p>

<p>set terminal pngcairo font &#8220;Gill Sans,9&#8221; linewidth 4 rounded size 1600,1200</p>

<p>Try it out and you will be surprised</p>
]]></content>
  </entry>
  
</feed>
