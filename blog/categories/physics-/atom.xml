<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: physics, | Physics drupal and other random stuff]]></title>
  <link href="http://dereine.github.com/physics-blog/blog/categories/physics-/atom.xml" rel="self"/>
  <link href="http://dereine.github.com/physics-blog/"/>
  <updated>2012-02-06T16:38:23+01:00</updated>
  <id>http://dereine.github.com/physics-blog/</id>
  <author>
    <name><![CDATA[Daniel Wehner]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Plot matrix]]></title>
    <link href="http://dereine.github.com/physics-blog/blog/2011/12/09/plot-matrix/"/>
    <updated>2011-12-09T15:11:00+01:00</updated>
    <id>http://dereine.github.com/physics-blog/blog/2011/12/09/plot-matrix</id>
    <content type="html"><![CDATA[<p>Asume you want to plot a big matrix, each has either 0 or 1.
The perfect display would be something similar like a qr-code:</p>

<p><img src="http://upload.wikimedia.org/wikipedia/commons/8/87/QRCode.png" /></p>

<p>Pyplot gives you the perfect tools to do that, see the endresult:</p>

<p><img src="http://wstaw.org/m/2011/12/09/image.png" /></p>

<p>Here is the full code:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>lang=python </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import matplotlib.pylab as plt
</span><span class='line'>import matplotlib.colors as colors&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>from pylab import rand&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>Black and white color map&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>bw_map = colors.ListedColormap(['black', 'white'])&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>Generate a 64x64 matrix and plot it with&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>plt.matshow(rand(64,64),fignum=100,cmap=bw_map)&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>And show it&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>plt.show()</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Compile root under ubuntu 11.10]]></title>
    <link href="http://dereine.github.com/physics-blog/blog/2011/11/17/use-root-dot-cern-to-find-a-minimum-of-a-function/"/>
    <updated>2011-11-17T15:44:00+01:00</updated>
    <id>http://dereine.github.com/physics-blog/blog/2011/11/17/use-root-dot-cern-to-find-a-minimum-of-a-function</id>
    <content type="html"><![CDATA[<p>There are several ways to find a minimum/optimum of a certain function, for example
for linear equations you can setup a matrix and solve it.</p>

<p>But there are also a lot of different kind of software packets. The one i want to show here
is the ROOT package from cern [1]. This package can handle a lot, so i will cover only a
really small part.</p>

<p><em>USE THE CURRENT TRUNK</em></p>

<h2>Installation under ubuntu</h2>

<p>First setup some bash variables:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">export </span><span class="nv">ROOTSYS</span><span class="o">=</span>path_to/root
</span><span class='line'><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="nv">$ROOTSYS</span>/bin:<span class="nv">$PATH</span>
</span><span class='line'><span class="nb">export </span><span class="nv">LD_LIBRARY_PATH</span><span class="o">=</span><span class="nv">$ROOTSYS</span>/lib:<span class="nv">$LD_LIBRARY_PATH</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Then change to your root folder and run:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd </span>root
</span><span class='line'>./configure linux
</span><span class='line'>make
</span></code></pre></td></tr></table></div></figure></notextile></div>
Now you have root compiled and start to work with it.</p>

<p>[1] http://root.cern.ch/drupal/content/about</p>
]]></content>
  </entry>
  
</feed>
