<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: latex | Physics and other random stuff]]></title>
  <link href="http://dereine.github.com/physics-blog/blog/categories/latex/atom.xml" rel="self"/>
  <link href="http://dereine.github.com/physics-blog/"/>
  <updated>2011-10-30T01:51:29+02:00</updated>
  <id>http://dereine.github.com/physics-blog/</id>
  <author>
    <name><![CDATA[Daniel Wehner]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Write cases in latex]]></title>
    <link href="http://dereine.github.com/physics-blog/blog/2011/10/22/latex-cases/"/>
    <updated>2011-10-22T07:13:00+02:00</updated>
    <id>http://dereine.github.com/physics-blog/blog/2011/10/22/latex-cases</id>
    <content type="html"><![CDATA[<p>
  Often you want to have something like
  <img src="http://itp.tugraz.at/wiki/images/math/f/3/5/f355f3bdfe7fb3fc66b4c44e1cf0e734.png" />
  when you write your own latex.
</p>


<p>This is quite easy</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Cases   </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='latex'><span class='line'>  f(n)=<span class="k">\begin</span><span class="nb">{</span>cases<span class="nb">}</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;n/2,  <span class="nb">&amp;</span>amp; <span class="k">\text</span><span class="nb">{</span>if <span class="nb">}</span>n<span class="k">\text</span><span class="nb">{</span> even,<span class="nb">}</span><span class="k">\\</span>
</span><span class='line'>3n+1, <span class="nb">&amp;</span>amp; <span class="k">\text</span><span class="nb">{</span>if <span class="nb">}</span>n<span class="k">\text</span><span class="nb">{</span> odd.<span class="nb">}</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  <span class="k">\end</span><span class="nb">{</span>cases<span class="nb">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Parse configuration with boost.]]></title>
    <link href="http://dereine.github.com/physics-blog/blog/2011/10/16/latex-parse-files/"/>
    <updated>2011-10-16T07:13:00+02:00</updated>
    <id>http://dereine.github.com/physics-blog/blog/2011/10/16/latex-parse-files</id>
    <content type="html"><![CDATA[<p>If you have some kind of simulation you always have input
which you have to parse to get the initial data.</p>

<ul>
<li>One solution is to use raw c++ code, but it's quite hard to read, complex and hard to change.</li>
<li>One solution is to use boost/tokenizer together with boost/lexical_cast and boost/algorithm/string.</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Parse a file with boost ++  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="c1">// Include the needed libraries.&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">boost</span><span class="o">/</span><span class="n">tokenizer</span><span class="p">.</span><span class="n">hpp</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">boost</span><span class="o">/</span><span class="n">algorithm</span><span class="o">/</span><span class="n">string</span><span class="p">.</span><span class="n">hpp</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">boost</span><span class="o">/</span><span class="n">lexical_cast</span><span class="p">.</span><span class="n">hpp</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// The actual code&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// Open the file</span>
</span><span class='line'><span class="n">string</span> <span class="n">filename</span> <span class="o">=</span> <span class="s">&quot;filename-we-want-to-open&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">ifstream</span> <span class="n">file</span><span class="p">(</span><span class="n">filename</span><span class="p">.</span><span class="n">c_str</span><span class="p">());</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// Shortcut to tokenizer type.</span>
</span><span class='line'><span class="k">typedef</span> <span class="n">boost</span><span class="o">::</span><span class="n">tokenizer</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">boost</span><span class="o">::</span><span class="n">char_separator</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">tokenizer</span><span class="p">;</span>
</span><span class='line'><span class="c1">// Define a seperator, which seperates by &quot; &quot;.</span>
</span><span class='line'><span class="c1">// By default it skips empty content, so you can import &quot;2.0       3 4&quot; with this.</span>
</span><span class='line'><span class="n">char_separator</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span> <span class="n">sep</span><span class="p">(</span><span class="s">&quot; &quot;</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// Load the content of the file line by line.</span>
</span><span class='line'><span class="k">while</span> <span class="p">(</span><span class="n">getline</span><span class="p">(</span><span class="n">file</span><span class="p">,</span> <span class="n">line</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// First trim the line content of whitespaces.</span>
</span><span class='line'>  <span class="c1">// Therefore boost/algorith/string.hpp is used.</span>
</span><span class='line'>  <span class="n">trim</span><span class="p">(</span><span class="n">line</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">// Seperate the actual line.</span>
</span><span class='line'>  <span class="n">tokenizer</span> <span class="n">tokens</span><span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="n">sep</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="c1">// Iterate over the availible tokens, so in our case &quot;2&quot;, &quot;3&quot;, &quot;4&quot;.</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">tokenizer</span><span class="o">::</span><span class="n">iterator</span> <span class="n">beg</span> <span class="o">=</span> <span class="n">tokens</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span> <span class="n">beg</span> <span class="o">!=</span> <span class="n">tokens</span><span class="p">.</span><span class="n">end</span><span class="p">();</span> <span class="o">++</span><span class="n">beg</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">// Use boost::lexical_cast to convert the strings to doubles.</span>
</span><span class='line'><span class="kt">double</span> <span class="n">value</span> <span class="o">=</span> <span class="n">lexical_cast</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="kt">double</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;(</span><span class="o">*</span><span class="n">beg</span><span class="p">);</span>
</span><span class='line'><span class="c1">// ... Do something with the value.</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Sure there might be a bunch of more advanced/easier way to do it, but this worked for me.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reference parts of your content in a latex document.]]></title>
    <link href="http://dereine.github.com/physics-blog/blog/2011/10/15/latex-references/"/>
    <updated>2011-10-15T07:13:00+02:00</updated>
    <id>http://dereine.github.com/physics-blog/blog/2011/10/15/latex-references</id>
    <content type="html"><![CDATA[<p>Often you want to reference certain prts of your latex document.
For example you have a diagramm in a float which float around somewhere in the document, but you want to refer to it in your text.
Another often used example are equations.</p>

<p>There are two steps you have to define:</p>

<ul>
<li>Define a label. For example \label{fig:picture-name-1}</li>
<li>Reference to it using \ref{fig:picture-name-1}</li>
</ul>


<p>That's it. Take care that most latex editors, for example kile
compiles your document twice to get references/table of content right.</p>
]]></content>
  </entry>
  
</feed>
