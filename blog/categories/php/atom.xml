<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: php | Physics drupal and other random stuff]]></title>
  <link href="http://dereine.github.com/physics-blog/blog/categories/php/atom.xml" rel="self"/>
  <link href="http://dereine.github.com/physics-blog/"/>
  <updated>2011-12-09T15:18:53+01:00</updated>
  <id>http://dereine.github.com/physics-blog/</id>
  <author>
    <name><![CDATA[Daniel Wehner]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[You know php is broken as well]]></title>
    <link href="http://dereine.github.com/physics-blog/blog/2011/10/30/php-wtf/"/>
    <updated>2011-10-30T07:13:00+01:00</updated>
    <id>http://dereine.github.com/physics-blog/blog/2011/10/30/php-wtf</id>
    <content type="html"><![CDATA[<p>As php is not strict like c++ you have a lot of crazy stuff.
Here is a random example</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Case block assigning varibles   </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">class foo {</span>
</span><span class='line'><span class="x">  function foo($val) {&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;pre&gt;&lt;code&gt;$this-&amp;gt;foo = $val;</span>
</span><span class='line'><span class="x">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;  }</span>
</span><span class='line'><span class="x">}&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;$foo1 =&amp;amp; $foo2;</span>
</span><span class='line'><span class="x">print_r($foo1);</span>
</span><span class='line'><span class="x">$foo1-&gt;foo = &quot;foo1&quot;;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;print_r($foo1-&gt;foo);</span>
</span><span class='line'><span class="x">$foo2 = new foo(&quot;foo3&quot;);</span>
</span><span class='line'><span class="x">print_r($foo1-&gt;foo);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The interesting thing is that you reference a not existing variable , initialize this variable and alter
the first variable. By default php throws quite some notices if you have non-strict code,
but here php doesn't complain.</p>

<p>Some interesting links to read: http://www.phpwtf.org/more-array-references http://www.phpwtf.org/array-reference-always-succeeds</p>
]]></content>
  </entry>
  
</feed>
